#(Memorandum de primer desarrollo del modelo en R en:
#C:\Users\artur\Documents\.EMPRESA_CSIC\Project_RednutSoil\cs-modelo-R\cs-model-R)
____________________________________________________________________________________
v1.0.0 - 2023-11-21
	> Creación de paquete Radimod.
	> Primera idea de estructura de paquete (EstructuraPaquete_23.12.12.pptx).
	> Creación función "radi_start.R". Base e  inicio.
	> Creación funciones "build_config.R" "resample_data.R". Funciones de lectura no 
	visibles para los usuarios. 
	> En data/ se agrupa el data y config, la idea es eliminar la necesidad de config,
	todo se hará con variables en la función "radi_start.R".
	> Todos los valores del input son en el SI

v1.0.1 - 2023-12-19
	> Borja modifica C++ para poder abrirlo y compilarlo desde R.
	> Estructura se basa en paquete Rcpp.

	TAREAS:
	> Probar a ejecutar el paquete y comprobar los resultados.
	> Buscar qué variables intreoducir al modelo y cómo leerlo desde Rcpp.

v1.0.2 - 2024-01-05
	> Versión funcional de R en formato paquete. Se le llama desde el directorio donde tengamos el archivo de data y config.
	> Solo lo hemos probado para datos de un sondeo. Falta añadir a la data muchos datos a ver qué hace.
	> Probamos para los datos de radiero diferntes valores de k-samples y e-samples para observar variación de resultados a diferentes 
	resoluciones. (.../Cs_model/resultados/).
	
v1.0.2 - 2024-01-10
	> Se activa el Plot.R
	> Se analizan los transectos y puntos de referencia con esta versión.
	
	TAREAS:
	> Desarrollar paquete que no necesite archivo config (Borja me tiene que mandar una función de .R y .cpp ejemplo con la variable "fallout").
	> Mirar como subir a CRAN paquetes.
	> Estructurar artículo según directices del journal "Enviromental Modelling & Software".

v1.0.3 - 2024-07-24
	> Cambio nombre del paquete a "RadEro"
	> Cambio nombre "radi_start" a "RadEro_run"
	> Cambio nombres de las columnas del archivo de entrada de datos de los perfiles de...
		ID;PROFA;PROFB;CS;REFINV;VOLEF;DENS;K;E;MIX_ZI;MIX_ZF;MIX_YEARI;MIX_YEARF;MIX_FREC;PROF
	a...	
		id;depth_i;depth_f;Cs137_invt;Ref_Cs137_invt;effVol;density;k;e;mix_depth_i;mix_depth_f;mix_year_i;mix_year_f;mix_frequency;lower_boundary
	> Se pueden escalar todos los ejes x de los gráficos con el parámetro AxisMaxValue.
	> Cambiamos la salida de parámetros en la consola y todo en inglés perfecto.
	> Se crea función para generar archivos de ejemplo "RadEro_example.R"

v1.0.4 - 2024-07-24 VERSIÓN CRAN
	> PRIMERA VERSIÓN ACEPTADA POR CRAN.
	> DESCRIPTION: Definición, referencias, correos... añadir a Dave Gamble como autor del código de cJSON.h.
	> CÓDIGO C: Quitar "fprintf" y similares expresiones que dan salida a texto en la computadora de C.
	> CÓDIGO C: Variables del código redundantes se han definido mejor. TODO HAN SIDO MEJORAS REQUERIDAS POR LOS PROPIOS CHEQUEOS DE CRAN
		> model.c: 
			AÑADIDO: paquetes C:
				#include <unistd.h>
				#include <limits.h>
			AÑADIDO: variables de archivos entrada y salida:
				#define CONFIGJS "_config.js"
				#define TXTEXP "_exp.txt"
				#define TXTNUM1 "_num.txt"
				#define TXTNUM2 "_num2.txt"
				#define TXTNUM3 "_num3.txt"
		> cJSON.c: 
			AÑADIDO: "void" allí dond se define una función: 
				/* Internal constructor. */
				static cJSON *cJSON_New_Item(void)
				{
				cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
				if (node) memset(node,0,sizeof(cJSON));
				return node;
				}
			CAMBIAR: "sprintf(str,"%d"..." por "snprintf(str, 1024,"
			ESCRIBIR: " (void)bytesRead;  // To avoid the warning "set but not used" "
			REESCRIBIR: con más orden código de : "cJSON *cJSON_DetachItemFromArray"
		> cJSON.h: 
			AÑADIDO: "void" allí dond se define una función
		> data.io.h: 
			CAMBIAR: "sprintf(str,"%d"..." por "snprintf(str, 1024," y añadir 1024 allí donde se requería. 
			AÑADIDO: "void" allí dond se define una función
			AÑADIDO: "(void)x2; // To avoid warning" para variables que se definen y no se usan, se hace para x2, x3, trash, j
			AÑADIDO: Modificaciones para que saque todos los num. que crea el modelo. (Esto ya se cambió en la v1.0.3).
		> defs.h: 
			AÑADIDO: int cs_model(void);
			COMENTAR: los fprintf, printf....
			"void write_activity"  MODIFICADO para sacar todos los num.
		> simulation.h: 
			AÑADIDO:"snprintf" en ve de "sprintf" (ESTO TAMBÍEN EN optimizatio.h)
			AÑADIDO: Definir valor inicial: x1 = 0.0; //To avoid errors, it's needed a x1 value if the condition "if" is not met.
		> Algunos de estos cambios los guardé por error sobre el código de la versión v.1.0.3 sobreescribiendolos. No afecta a su funcionamiento, son mejoras de de escritura, pero ahora puede ser dificil detectar los cambios entre v.1.0.3 y v1.0.4, para detectar cambios mejor comparar con v1.0.2 que tiene el código más viejo.
	> CÓDIGO R: Todo comentado, explicando sus variables y resultados.
	> CÓDIGO R: Función "RadEro_example.R" da un "input-" "config" y "data" de ejemplo con MUY POCAS ITERACIONES. Para que se ajuste al tiempo de testeo qu epide CRAN.
	> CÓDIGO R: Ejemplos escritos no son LEÍDOS por CRAN ya que han degenererar archivos temporales y se hacía un lío. 
   **ojo a esta --> CÓDIGO R: NINGUNA FUNCIÓN SE EJECUTA EN EL DIRECTORIO DE TRABAJO, TODAS HAN DE DEFINIR DIRECTORIO.

v1.0.5 - 2024-11-14 VERSIÓN CRAN
	> Actualización de v1.0.4 con cambios menores necesarios según CRAN para manterner el paquete en el repositorio.
	> CÓDIGO C: Cambio en rcpp_hello_world.cpp : rextern "C" int cs_model();
	> La compilación de CRAN daba problemas pero se ha autocorregido por ellos.
	> DESCRIPTION: Poner nuestro correo conjunto: "radero@eead.csic.es"


